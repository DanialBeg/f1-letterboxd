name: CI/CD Pipeline

on:
  push:
    branches: [ main, feat/* ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      working-directory: ./backend
      run: go mod tidy
    
    - name: Run backend tests
      working-directory: ./backend
      run: go test ./...
    
    - name: Build backend
      working-directory: ./backend
      run: go build -v ./...

  frontend-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  e2e-tests:
    needs: [backend-tests, frontend-build]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Go for backend
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    # Setup Node.js for frontend
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    # Install dependencies
    - name: Install backend dependencies
      working-directory: ./backend
      run: go mod tidy
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    # Start backend server
    - name: Start backend server
      working-directory: ./backend
      run: |
        go run . &
        echo $! > backend.pid
        sleep 5
        # Test if server is running
        curl -f http://localhost:8080/api/seasons || (echo "Backend failed to start" && exit 1)
      env:
        PORT: 8080
    
    # Install Playwright and run tests
    - name: Install Playwright Browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
    
    - name: Run Playwright tests
      working-directory: ./frontend
      run: npm run test
      env:
        CI: true
    
    # Clean up
    - name: Stop backend server
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi
    
    # Upload test results
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: |
          frontend/playwright-report/
          frontend/test-results/
        retention-days: 30